name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
env:
  DOCKER_IMAGE: quandre1/mongo
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint
      continue-on-error: false

    - name: Run tests
      run: npm test

    - name: Generate test coverage
      run: npm test -- --coverage
      continue-on-error: true

  build-and-push:
    name: Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract Git metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          # Latest tag for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          # Tag with commit SHA
          type=sha,prefix={{branch}}-,format=short
          # Tag with branch name
          type=ref,event=branch
          # Tag with version if package.json version changes
          type=semver,pattern={{version}}

    - name: Build and push Docker image
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}

    - name: Output image digest
      run: echo "Image digest:${{ steps.build-push.outputs.digest }}"

  security-scan:
    name: Security Scan
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  notify:
    name: Notify Success
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Send success notification
      run: |
        echo "CI/CD Pipeline completed successfully!"
        echo "Tests passed"
        echo "Docker image built and pushed: ${{ env.DOCKER_IMAGE }}:latest"
        echo "Ready for deployment!"
    
      
